# Python Error Types — Causes & Fixes
# ---------------------------------------------

# 1. SyntaxError
# Happens when Python cannot parse the code due to incorrect syntax.
# Example:
# if True print("Hi")  # ❌ Missing colon
# Fix: Follow correct Python syntax rules (colons, indentation, parentheses, etc.).

# 2. NameError
# Happens when you use a variable or function name that hasn’t been defined.
# Example:
# print(my_var)  # ❌ my_var is not defined
# Fix: Make sure the name is spelled correctly and defined before use.

# 3. IndexError
# Happens when you access a list/tuple index that doesn’t exist.
# Example:
# nums = [1, 2, 3]
# print(nums[5])  # ❌ Index 5 out of range
# Fix: Check the length before accessing: if index < len(nums): ...

# 4. ModuleNotFoundError
# Happens when you import a module that is not installed or cannot be found.
# Example:
# import not_a_real_module  # ❌
# Fix: Install with pip install module_name or ensure the file/module exists.

# 5. AttributeError
# Happens when you access an attribute or method that does not exist for an object.
# Example:
# x = 5
# x.append(3)  # ❌ int has no attribute 'append'
# Fix: Check the object type and use valid attributes/methods.

# 6. KeyError
# Happens when you access a dictionary key that doesn’t exist.
# Example:
# person = {"name": "Alice"}
# print(person["age"])  # ❌ Key 'age' not found
# Fix: Use .get() with a default value: person.get("age", "Not available")

# 7. TypeError
# Happens when an operation/function is used on an incompatible type.
# Example:
# "5" + 5  # ❌ Cannot add str and int
# Fix: Convert types before operation: int("5") + 5

# 8. ValueError
# Happens when a function gets the right type but an invalid value.
# Example:
# int("hello")  # ❌ Cannot convert to int
# Fix: Validate data before passing to functions.

# 9. ZeroDivisionError
# Happens when you try to divide by zero.
# Example:
# 10 / 0  # ❌ Division by zero
# Fix: Check the denominator before dividing: if num != 0: result = 10 / num

# ✅ Tips to Avoid Errors:
# - Use try...except blocks for error handling
# - Validate user input and data before processing
# - Use print() or debugging tools to inspect values
